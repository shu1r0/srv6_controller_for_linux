
syntax = 'proto3';


/**
 * Encap type for SRv6
 */
enum Seg6Type {
  UNKNOWN = 0;

  SEG6 = 1;
  SEG6LOCAL = 2;
}

/**
 * segment routing mode
 */
enum Seg6Mode {
  INLINE = 0;
  ENCAP = 1;
  L2ENCAP = 2;
}

/**
 * Seg6 local action
 */
enum Seg6LocalAction {
  NOACTION = 0;

  END  = 1;
  END_X  = 2;
  END_T  = 3;
  END_DX2 = 4;
  END_DX6 = 5;
  END_DX4 = 6;
  END_DT6 = 7;
  END_DT4 = 8;
  END_B6 = 9;
  END_B6_ENCAP = 10;
  END_BM = 11;
  END_S  = 12;
  END_AS = 13;
  END_AM = 14;
  END_BPF = 15;
  END_DT46 = 16;
}

/**
 * Route Config
 */
message Route {
  // network address or default
  string destination = 1;
  string gateway = 2;
  string dev = 3;
  int32 metric = 4;
  int32 table = 5;

  oneof encap {
    Seg6Encap seg6_encap = 10;
    Seg6LocalEncap seg6local_encap = 11;
  }
}

/**
 * SRv6 Config
 */
message Seg6Encap {
  Seg6Type type = 1;
  Seg6Mode mode = 2;
  repeated string segments = 3;
}

/**
 * Seg6Local Config
 *
 * Operation to perform on matching packets.
 */
message Seg6LocalEncap {
  Seg6Type type = 1;
  Seg6LocalAction action = 2;
  oneof param {
    string nh6 = 10;  // next hop
    string nh4 = 11;
    Srh srh = 12;
    string oif = 13;  // out interface
    uint32 table = 14;  // table
    Bpf bpf = 15;
  }

  message Srh {
    repeated string segments = 1;
    string hmac = 2;
  }

  message Bpf {
    uint64 fd = 1;
    string name = 2;
  }
}

/**
 * Reply for Route Request
 */
message RouteReply {
  uint32 status = 1;
}

message GetRoutesRequest {
  // Todo
}


message ReplyRoute {
  string dst = 1;
  string oif = 2;  // dev
  string gateway = 3;
  int32 priority = 4;
  string prefsrc = 5;
//  string metrics = 6;
  repeated ReplyRoute multipath = 7;

  string table = 10;
  oneof encap {
    Seg6Encap seg6_encap = 110;
    Seg6LocalEncap seg6local_encap = 111;
  }
  string proto = 12;
  int32 scope = 13;
}

message GetRoutesReply {
  repeated ReplyRoute routes = 1;
}

/**
 * Route Service on Agent
 */
service Seg6Service {
  rpc AddRoute(Route) returns (RouteReply);
  rpc ReplaceRoute(Route) returns (RouteReply);
  rpc RemoveRoute(Route) returns (RouteReply);
  rpc GetRoutes(GetRoutesRequest) returns (GetRoutesReply);
}